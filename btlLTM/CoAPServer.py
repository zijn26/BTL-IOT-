
"""
CoAP Server ƒë∆°n gi·∫£n b·∫±ng Python thu·∫ßn
Ch·ªâ s·ª≠ d·ª•ng socket UDP v√† threading c∆° b·∫£n
"""
import json
import time
import socket
import threading
from CoAPMessageXuLI import CoAPContentFormat, CoAPMessage, CoAPCode, CoAPType, create_response
# {
#     "id": 1,
#     "data": 3.4,
#     "time": 1727164800
# }
class SimpleCoAPServer:
    """CoAP Server ƒë∆°n gi·∫£n"""

    def __init__(self, host: str = "127.0.0.1", port: int = 5683):
        self.host = host
        self.port = port
        self.socket = None
        self.running = False # Dictionary: path -> in-memory store

        # ƒêƒÉng k√Ω default resources
        self.resources = {}
        # self.resources["/test/demo"] = [{} , { "id" : 1 , sds} , {} , {} ]  # M·∫£ng l∆∞u tr·ªØ c√°c item JSON
    # def add_resource(self, path: str, resource ):
    #     """Th√™m resource v√†o server"""
    #     self.resources[path] = resource
    #     print(f"üìç Registered resource: {path} -> {resource.name}")

    # def find_resource(self, path: str) -> SimpleCoAPResource:
    #     """T√¨m resource theo path"""
    #     # Exact match tr∆∞·ªõc
    #     if path in self.resources:
    #         return self.resources[path]

    #     # Fallback to root n·∫øu kh√¥ng t√¨m th·∫•y
    #     return self.resources.get("/", None)
    def handle_get(self, request: CoAPMessage, store) -> CoAPMessage:
        """X·ª≠ l√Ω GET request - tr·∫£ v·ªÅ ph·∫ßn t·ª≠ m·ªõi nh·∫•t ho·∫∑c r·ªóng"""
        data = request.payload.decode('utf-8')
        obj = json.loads(data)
        if "id" in obj:
            for item in store:
                if item["id"] == obj["id"]:
                    payload = json.dumps(item).encode()
                    break
            else:
                payload = json.dumps({"message": "not found"}).encode()
        else:
            payload = json.dumps(store).encode()
        return create_response(request, CoAPCode.CONTENT, payload)

    def handle_post(self, request: CoAPMessage, store) -> CoAPMessage:
        """X·ª≠ l√Ω POST request - l∆∞u JSON {id,data,time} v√†o danh s√°ch items"""
        try:
            data = request.payload.decode('utf-8')
            obj = json.loads(data)
            obj["recv_time"] = time.time()
            store.append(obj)
            return create_response(request, CoAPCode.CREATED, json.dumps({"message": "stored"}).encode())
        except Exception as e:
            err = {"error": f"invalid payload: {e}"}
            return create_response(request, CoAPCode.BAD_REQUEST, json.dumps(err).encode())

    def handle_put(self, request: CoAPMessage, store) -> CoAPMessage:
        """X·ª≠ l√Ω PUT request - c·∫≠p nh·∫≠t item theo id n·∫øu t·ªìn t·∫°i"""
        try:
            data = request.payload.decode('utf-8')
            obj = json.loads(data)
            obj["recv_time"] = time.time()
           # duyet theo mang i de lay store[i] = obj
            for i in range(len(store)):
                if store[i].get("id") == obj.get("id"):
                    store[i] = obj
                    break
            return create_response(request, CoAPCode.CHANGED, json.dumps({"message": "updated"}).encode())
        except Exception as e:
            err = {"error": f"invalid payload: {e}"}
            return create_response(request, CoAPCode.BAD_REQUEST, json.dumps(err).encode())

    def handle_delete(self, request: CoAPMessage, store) -> CoAPMessage:
        """X·ª≠ l√Ω DELETE request - x√≥a item theo id"""
        try:
            data = request.payload.decode('utf-8')
            obj = json.loads(data)
            for item in store:
                if item.get("id") == obj.get("id"):
                    store.remove(item)
                    break
            return create_response(request, CoAPCode.DELETED, json.dumps({"message": "deleted"}).encode())
        except Exception as e:
            err = {"error": f"invalid payload: {e}"}
            return create_response(request, CoAPCode.BAD_REQUEST, json.dumps(err).encode())
    def handle_request(self, data: bytes, client_address: tuple, dataBase):
        """X·ª≠ l√Ω CoAP request"""
        try:
            # Parse request
            request = CoAPMessage.from_bytes(data)
            print(f"üì• Request from {client_address}: {request}")

            # T√¨m resource
            path = request.get_uri_path()
            store = dataBase.setdefault(path, [])
            # Dispatch theo method
            if request.code == CoAPCode.GET:
                response = self.handle_get(request, store)
            elif request.code == CoAPCode.POST:
                response = self.handle_post(request, store)
            elif request.code == CoAPCode.PUT:
                response = self.handle_put(request, store)
            elif request.code == CoAPCode.DELETE:
                response = self.handle_delete(request, store)
            else:
                response = create_response(request, CoAPCode.METHOD_NOT_ALLOWED, b"Method not supported")

            # G·ª≠i response
            response_data = response.to_bytes()
            self.socket.sendto(response_data, client_address)
            print(f"üì§ Response to {client_address}: {response}")

        except Exception as e:
            print(f"‚ùå Error handling request from {client_address}: {e}")
            # G·ª≠i error response n·∫øu c√≥ th·ªÉ
            try:
                error_response = CoAPMessage()
                error_response.msg_type = CoAPType.RST
                error_response.message_id = 0
                error_response.code = CoAPCode.INTERNAL_SERVER_ERROR
                error_response.set_content_format(CoAPContentFormat.JSON)
                error_response.payload = json.dumps({"error": str(e)}).encode()
                self.socket.sendto(error_response.to_bytes(), client_address)
            except:
                pass

    def start(self):
        """Kh·ªüi ƒë·ªông CoAP server"""
        print(f"üöÄ Starting CoAP Server on {self.host}:{self.port}")

        # T·∫°o UDP socket
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
        #socket.SOCK_DGRAM  l√† socket type cua UDP
        #socket.SO_REUSEADDR cho phep su dung lai port sau khi server dung
        # boi vi khi server dung, port van con duoc su dung do tcp van o che do time wait
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        try:
            self.socket.bind((self.host, self.port))
            print(f"‚úÖ CoAP Server listening on {self.host}:{self.port}")
            print("üìö Available resources:")
            for path in self.resources.keys():
                print(f"   {path}")
          

            self.running = True

            # Main server loop
            while self.running:
                try:
                    # Nh·∫≠n request (blocking)
                    data, client_address = self.socket.recvfrom(1024)

                    # X·ª≠ l√Ω request trong thread ri√™ng ƒë·ªÉ kh√¥ng block
                    thread = threading.Thread(
                        target=self.handle_request, 
                        args=(data, client_address , self.resources),
                        daemon=True
                    )
                    thread.start()

                except socket.error as e:
                    if self.running:  # Ch·ªâ log l·ªói n·∫øu server v·∫´n ƒëang ch·∫°y
                        print(f"‚ùå Socket error: {e}")

        except KeyboardInterrupt:
            print("\nüõë Server stopped by user")
        except Exception as e:
            print(f"‚ùå Server error: {e}")
        finally:
            self.stop()

    def stop(self):
        """D·ª´ng server"""
        self.running = False
        if self.socket:
            self.socket.close()
            print("üîå Server socket closed")

if __name__ == "__main__":
    # Ch·∫°y server
    server = SimpleCoAPServer()

    try:
        server.start()
    except KeyboardInterrupt:
        print("\nBye! üëã")
