#!/usr/bin/env python3
"""
MQTT Broker ƒë∆°n gi·∫£n t·ª´ ƒë·∫ßu - Kh√¥ng s·ª≠ d·ª•ng th∆∞ vi·ªán MQTT c√≥ s·∫µn
Ch·ªâ s·ª≠ d·ª•ng socket, threading, struct ƒë·ªÉ hi·ªÉu r√µ b·∫£n ch·∫•t c·ªßa MQTT Broker

T√°c gi·∫£: DIY MQTT Broker
M·ª•c ƒë√≠ch: H·ªçc t·∫≠p v√† hi·ªÉu r√µ c√°ch ho·∫°t ƒë·ªông c·ªßa MQTT Broker
"""

import socket
import threading
import struct
import time
from typing import Dict, List, Optional
from app.security import verify_device_token    
# MQTT Control Packet Types (theo MQTT 3.1.1 specification)
MQTT_PACKET_TYPES = {
    1: 'CONNECT',
    2: 'CONNACK', 
    3: 'PUBLISH',
    4: 'PUBACK',
    5: 'PUBREC',
    6: 'PUBREL',
    7: 'PUBCOMP',
    8: 'SUBSCRIBE',
    9: 'SUBACK',
    10: 'UNSUBSCRIBE',
    11: 'UNSUBACK',
    12: 'PINGREQ',
    13: 'PINGRESP',
    14: 'DISCONNECT'
}
TAG = "MQTT Broker : "
TOPIC_CONTRO=  "CT/"
TOPIC_SENSOR = "SS/"

class SimpleMQTTBroker:
    """
    MQTT Broker ƒë∆°n gi·∫£n - Tr√°i tim c·ªßa IoT communication

    ƒê√¢y ch√≠nh l√† "b·ªô n√£o" m√† b·∫°n mu·ªën hi·ªÉu:
    - TCP Socket Server l·∫Øng nghe port 1883
    - Dictionary l∆∞u subscriptions (topic -> list clients) 
    - Logic Pub/Sub: ai subscribe topic n√†o th√¨ nh·∫≠n tin nh·∫Øn topic ƒë√≥
    """
    def __init__(self, host='localhost', port=1883):
        self.host = host
        self.port = port
        self.socket = None
        self.running = False
        self.handle_disconect = None
        self.handle_connected = None
        # *** C√ÅC C·∫§U TR√öC D·ªÆ LI·ªÜU CH√çNH - TR√ÅI TIM C·ª¶A BROKER ***
        self.clients = {}                    # {client_id: socket_object}
        self.subscriptions = {}              # {topic: [list_of_client_sockets]} <- MAGIC HERE!
        self.client_subscriptions = {}       # {client_socket: [list_of_topics]}

    def start(self):
        """Kh·ªüi ƒë·ªông MQTT Broker Server"""
        try:
            # T·∫°o TCP Socket Server - ƒê√¢y l√† n·ªÅn t·∫£ng c·ªßa m·ªçi th·ª©
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            #socket.SO_REUSEADDR cho phep su dung lai port sau khi server dung
            # boi vi khi server dung, port van con duoc su dung do tcp van o che do time wait
            self.socket.bind((self.host, self.port))
            self.socket.listen(5)  # C√≥ th·ªÉ handle 5 pending connections

            self.running = True
            print(f"\n‚úÖ MQTT Broker ƒë√£ kh·ªüi ƒë·ªông t·∫°i {self.host}:{self.port}")
            while self.running:
                try:
                    # Accept k·∫øt n·ªëi m·ªõi - Khi ESP32 g·ªçi client.connect()
                    client_socket, address = self.socket.accept()
                    print(TAG + f"\nüåü K·∫øt n·ªëi m·ªõi t·ª´: {address}")
                    print(TAG + f"üîå Socket object: {client_socket}")

                    # T·∫°o thread ƒë·ªÉ x·ª≠ l√Ω client n√†y (b·ªè qua threading complexity theo y√™u c·∫ßu)
                    # Nh∆∞ng c·∫ßn thi·∫øt ƒë·ªÉ handle multiple clients
                    client_thread = threading.Thread(
                        target=self.handle_client, 
                        args=(client_socket, address),
                        daemon=True
                    )
                    client_thread.start()

                except Exception as e:
                    if self.running:
                        print(TAG + f"‚ùå L·ªói khi accept connection: {e}")

        except Exception as e:
            print(TAG + f"‚ùå L·ªói kh·ªüi ƒë·ªông server: {e}")
        finally:
            self.stop()

    def stop(self):
        """D·ª´ng broker"""
        self.running = False
        if self.socket:
            self.socket.close()

    def handle_client(self, client_socket, address):
        """
        X·ª≠ l√Ω m·ªôt client c·ª• th·ªÉ - ƒê√¢y l√† v√≤ng l·∫∑p ch√≠nh c·ªßa m·ªói client
        M·ªói ESP32 s·∫Ω c√≥ m·ªôt thread ri√™ng ch·∫°y function n√†y
        """
        client_id = None
        print(TAG + f"üéØ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω client {address}")

        try:
            while self.running:
                # Nh·∫≠n d·ªØ li·ªáu t·ª´ client - ƒë√¢y l√† socket.recv()
                data = client_socket.recv(1024)
                if not data:
                    print(f"üîå Client {address} ƒë√£ ng·∫Øt k·∫øt n·ªëi (empty data)")
                    break
                # Parse MQTT packet - Gi·∫£i m√£ "ng√¥n ng·ªØ" MQTT
                packet_type, payload = self.parse_mqtt_packet(data)
                # X·ª≠ l√Ω c√°c lo·∫°i packet kh√°c nhau
                if packet_type == 'CONNECT':
                    client_id = self.handle_connect(client_socket, payload, address)
                elif packet_type == 'PUBLISH':
                    print("üéØ *** ƒê√ÇY L√Ä PUBLISH - TR√ÅI TIM PUB/SUB! ***")
                    self.handle_publish(client_socket, payload)
                elif packet_type == 'SUBSCRIBE':
                    print("üéØ *** ƒê√ÇY L√Ä SUBSCRIBE - ƒêƒÇNG K√ù NH·∫¨N TIN! ***")
                    self.handle_subscribe(client_socket, payload, client_id)
                elif packet_type == 'PINGREQ':
                    self.handle_ping(client_socket)
                elif packet_type == 'DISCONNECT':
                    self.cleanup_client(client_socket, client_id)
                    break
                else:
                    print(TAG + f"‚ö†Ô∏è Packet type kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {packet_type} ")

        except Exception as e:
            print(TAG + f"‚ùå L·ªói khi x·ª≠ l√Ω client {address}: {e}")
        finally:
            self.cleanup_client(client_socket, client_id)

    def parse_mqtt_packet(self, data):
        """
        Parse MQTT packet - Gi·∫£i m√£ 'ng√¥n ng·ªØ' MQTT

        MQTT packet format:
        [Fixed Header][Variable Header][Payload]

        Fixed Header:
        - Byte 1: Packet Type (bits 4-7) + Flags (bits 0-3)  
        - Byte 2+: Remaining Length
        """
        if len(data) < 2:
            return None, None

        # Byte ƒë·∫ßu ti√™n ch·ª©a packet type
        first_byte = data[0]
        packet_type_num = (first_byte >> 4) & 0x0F  # L·∫•y 4 bits cao
        packet_type = MQTT_PACKET_TYPES.get(packet_type_num, 'UNKNOWN')
        # Byte th·ª© 2 l√† remaining length (simplified - th·ª±c t·∫ø ph·ª©c t·∫°p h∆°n)
        remaining_length = data[1] if len(data) > 1 else 0
        payload = data[2:2+remaining_length] if len(data) > 2 else b''
        return packet_type, payload

    def handle_connect(self, client_socket, payload, address): # loi iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
        """
        X·ª≠ l√Ω MQTT CONNECT - Client "xin ch√†o" broker
        """
        try:
            # Parse client ID t·ª´ payload (simplified parsing)   
            # Th·ª±c t·∫ø MQTT CONNECT packet ph·ª©c t·∫°p h∆°n nhi·ªÅu
            client_id = payload[10:10+len(payload)].decode('utf-8') # ƒê∆°n gi·∫£n h√≥a

            # data_device = verify_device_token(client_id)
            data_device = "78"
            if(data_device is None): 
                connack = bytes([0x20, 0x02, 0x00, 0x02])  # CONNACK v·ªõi return code 2 t·ª©c l√† client id kh√¥ng h·ª£p l·ªá 
                client_socket.send(connack)
                return None
            else:
            # *** L∆ØU CLIENT V√ÄO 'B·ªò NH·ªö' BROKER ***
                self.clients[client_id] = client_socket
                self.client_subscriptions[client_socket] = []
                # G·ª≠i CONNACK - "Ch√†o l·∫°i, k·∫øt n·ªëi th√†nh c√¥ng!"
                connack = bytes([0x20, 0x02, 0x00, 0x00])  # CONNACK v·ªõi return code 0
                client_socket.send(connack)
                if self.handle_connected : 
                    self.handle_connected(client_socket , client_id)
                print(TAG + f"üì§ ƒê√£ g·ª≠i CONNACK cho {client_id}")
                return client_id

        except Exception as e:
            print(TAG + f"‚ùå L·ªói x·ª≠ l√Ω CONNECT: {e} --- client_socket : {client_socket} ")
            return None

    def handle_publish(self, client_socket, payload):
        """
        *** ƒê√ÇY L√Ä TR√ÅI TIM C·ª¶A PUB/SUB PATTERN! ***

        Khi ESP32 g·ªçi client.publish("nha/den", "ON"):
        1. T√¨m topic "nha/den" trong subscriptions
        2. L·∫•y danh s√°ch t·∫•t c·∫£ client_socket ƒë√£ subscribe topic n√†y
        3. G·ª≠i message "ON" cho t·∫•t c·∫£ nh·ªØng client ƒë√≥

        ƒê√≥ ch√≠nh l√† to√†n b·ªô b√≠ m·∫≠t c·ªßa MQTT!
        """
        client_id_len = struct.unpack(">H", payload[8:10])[0]
        if len(payload) >= 10 + client_id_len:
            client_id = payload[10:10+client_id_len].decode('utf-8')
        else:
            client_id = None
        print(TAG + f"üìù PUBLISH RECEIVED:")
        try:
            # Parse topic name t·ª´ MQTT PUBLISH packet
            if len(payload) < 2:
                print(TAG + f"‚ùå Payload qu√° ng·∫Øn ")
                return

            # 2 bytes ƒë·∫ßu l√† topic length
            topic_len = struct.unpack(">H", payload[0:2])[0]

            if len(payload) < 2 + topic_len:
                print(TAG + f"‚ùå Payload kh√¥ng ƒë·ªß d√†i cho topic ")
                return

            # Extract topic v√† message
            topic = payload[2:2+topic_len].decode('utf-8')
            message = payload[2+topic_len:].decode('utf-8')
            # *** LOGIC PUB/SUB CH√çNH - ƒê√ÇY L√Ä MAGIC! ***

            if topic in self.subscriptions:
                subscribers = self.subscriptions[topic]
                # T·∫°o PUBLISH packet ƒë·ªÉ g·ª≠i cho subscribers
                publish_packet = self.create_publish_packet(topic, message)
                # *** G·ª¨I CHO T·∫§T C·∫¢ SUBSCRIBERS - ƒê√ÇY L√Ä DISTRIBUTION! ***
                successful_sends = 0
                for subscriber_socket in subscribers:
                    try:
                        subscriber_socket.send(publish_packet)
                        successful_sends += 1
                    except Exception as e:
                        print(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i ƒë·∫øn subscriber: {e}")

                print(TAG + f"üéâ ƒê√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn {successful_sends}/{len(subscribers)} subscribers")

            else:
                print(TAG + f"üì≠ KH√îNG c√≥ subscriber n√†o cho topic '{topic}'")

        except Exception as e:
            print(TAG + f"‚ùå L·ªói x·ª≠ l√Ω PUBLISH: {e} ")

    def handle_subscribe(self, client_socket, payload, client_id):
        """
        *** X·ª¨ L√ù SUBSCRIBE - ƒêƒÇNG K√ù NH·∫¨N TIN! ***

        Khi App ƒëi·ªán tho·∫°i g·ªçi client.subscribe("nha/den"):
        1. Th√™m client_socket v√†o subscriptions["nha/den"]
        2. T·ª´ gi·ªù, m·ªói khi c√≥ ai publish "nha/den", app s·∫Ω nh·∫≠n ƒë∆∞·ª£c

        ƒê√≥ l√† to√†n b·ªô logic!
        """


        try:
            # Parse SUBSCRIBE packet
            # Skip packet identifier (2 bytes ƒë·∫ßu)
            offset = 2
            subscribed_topics = []

            while offset < len(payload):
                # Parse topic name
                if offset + 2 > len(payload):
                    break

                topic_len = struct.unpack(">H", payload[offset:offset+2])[0]
                offset += 2

                if offset + topic_len > len(payload):
                    break

                topic = payload[offset:offset+topic_len].decode('utf-8')
                
                offset += topic_len + 1  # +1 for QoS byte (skip)


                # T·∫°o danh s√°ch subscribers cho topic n√†y n·∫øu ch∆∞a c√≥
                if topic not in self.subscriptions:
                    self.subscriptions[topic] = []

                # Th√™m client socket v√†o danh s√°ch subscribers
                if client_socket not in self.subscriptions[topic]:
                    self.subscriptions[topic].append(client_socket)
                  
                else:
                    print(TAG + f"‚ö†Ô∏è Client ƒë√£ subscribe topic n√†y r·ªìi ")

                # L∆∞u subscription cho client n√†y (ƒë·ªÉ cleanup sau)
                if topic not in self.client_subscriptions[client_socket]:
                    self.client_subscriptions[client_socket].append(topic)

                subscribed_topics.append(topic)

            # G·ª≠i SUBACK - "ƒê√£ ƒëƒÉng k√Ω th√†nh c√¥ng!"
            if subscribed_topics:
                # Simplified SUBACK packet
                suback_payload = bytes([payload[0], payload[1]]) + b'\x00' * len(subscribed_topics)
                suback = bytes([0x90, len(suback_payload)]) + suback_payload
                client_socket.send(suback)

            for topic, subscribers in self.subscriptions.items():
                print(TAG + f"   '{topic}': {len(subscribers)} subscribers ")

        except Exception as e:
            print(TAG + f"‚ùå L·ªói x·ª≠ l√Ω SUBSCRIBE: {e} ")

    def handle_ping(self, client_socket):
        """X·ª≠ l√Ω MQTT PINGREQ - Heartbeat"""
        print(f"üèì Nh·∫≠n PINGREQ, g·ª≠i PINGRESP")
        print(f"üí° ƒê√¢y nh∆∞ client h·ªèi: 'Broker c√≤n s·ªëng kh√¥ng?' v√† broker tr·∫£ l·ªùi: 'C√≤n!'")
        pingresp = bytes([0xD0, 0x00])  # PINGRESP
        client_socket.send(pingresp)

    def getAllTopic(self) : 
        # tra ve danh sachs subrice 
        return self.subscriptions.keys()

    def create_publish_packet(self, topic, message):
        """
        T·∫°o MQTT PUBLISH packet ƒë·ªÉ g·ª≠i cho subscribers

        ƒê√¢y l√† qu√° tr√¨nh 'ƒë√≥ng g√≥i' message theo ƒë·ªãnh d·∫°ng MQTT
        ƒë·ªÉ g·ª≠i cho clients ƒë√£ subscribe
        """
        topic_bytes = topic.encode('utf-8')
        message_bytes = message.encode('utf-8')

        # MQTT PUBLISH packet format:
        # [Fixed Header: packet type + remaining length]
        # [Variable Header: topic length + topic] 
        # [Payload: message]

        remaining_length = 2 + len(topic_bytes) + len(message_bytes)

        packet = bytearray()
        packet.append(0x30)  # PUBLISH packet type (0011 0000)
        packet.append(remaining_length)  # Remaining length (simplified)

        # Variable Header: Topic length + topic
        packet.extend(struct.pack(">H", len(topic_bytes)))  # Topic length (2 bytes big-endian)
        packet.extend(topic_bytes)

        # Payload: Message
        packet.extend(message_bytes)
        return bytes(packet)

    def cleanup_client(self, client_socket, client_id):
        """
        D·ªçn d·∫πp khi client ng·∫Øt k·∫øt n·ªëi
        X√≥a client kh·ªèi t·∫•t c·∫£ c·∫•u tr√∫c d·ªØ li·ªáu
        """
        if self.handle_disconect:
            self.handle_disconect(client_socket, client_id)
        try:
            # X√≥a client kh·ªèi clients dictionary
            if client_id and client_id in self.clients:
                del self.clients[client_id]

            # X√≥a client kh·ªèi t·∫•t c·∫£ subscriptions
            topics_to_cleanup = []
            for topic, subscribers in self.subscriptions.items():
                if client_socket in subscribers:
                    subscribers.remove(client_socket)
                    if not subscribers:  # N·∫øu kh√¥ng c√≤n subscriber n√†o
                        topics_to_cleanup.append(topic)

            # X√≥a topics kh√¥ng c√≤n subscribers
            for topic in topics_to_cleanup:
                del self.subscriptions[topic]
            # X√≥a client subscriptions
            if client_socket in self.client_subscriptions:
                del self.client_subscriptions[client_socket]

            # ƒê√≥ng socket
            try:
                client_socket.close()
            except:
                pass
        except Exception as e:
            print(f"‚ùå L·ªói d·ªçn d·∫πp client: {e}")

# ================================
# CH∆Ø∆†NG TR√åNH CH√çNH
# ================================

def main():
    broker = SimpleMQTTBroker()
    try:
        print("\n‚èπÔ∏è  Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng broker")
        broker.start()
    except KeyboardInterrupt:
        print("\n\nüõë ƒêang d·ª´ng broker...")
        broker.stop()
        print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng DIY MQTT Broker!")

if __name__ == "__main__":
    main()
